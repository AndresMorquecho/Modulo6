
___ORDEN____________

lib/
├── models/
│   └── clase.dart
│   └── routes.dart
├── services/
│   └── database_helper.dart
├── views/
│   ├── add_x_page.dart
│   ├── edit_x_page.dart
│   └── home_page.dart
├── widgets/
│   └── x_tile.dart
test/
└── database_helper_test.dart

__________________DEPENDENCIAS_____________________
dependencies:
  flutter:
    sdk: flutter
  sqflite: ^2.0.0+3 
  path: ^1.8.3 
  sqflite_common_ffi: ^2.0.0+4       

  intl: ^0.19.0    

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^5.0.0
  test: ^1.16.0
__________________ DATABASE HELPER_______________

import 'package:gestion_tareas/models/tarea.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;

  DatabaseHelper._internal();

   static Database? _database;

  Future<Database> get database async {
    if (_database != null) {
      return _database!;
    } else {
      return _database = await initDatabase();
    }
  }

  Future<Database> initDatabase() async {
    String path = join(await getDatabasesPath(), 'task.db');
    return openDatabase(
      version: 1,
      path,
      onCreate: (db, version) async {
        return await db.execute(
          'create table task(id integer primary key, titulo text, descripcion text, fechaVencimiento text, estado text )',
        );
      },
    );
  }

  Future<void> insertTarea(Tarea tarea) async {
    final db = await database;
    db.insert(
      'task',
      tarea.toMap(),
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
  }

  Future<List<Tarea>> getTareas() async {
    final db = await database;
    final List<Map<String, dynamic>> map = await db.query('task');
    return List.generate(map.length, (i) {
      return Tarea(
        id: map[i]['id'],
        titulo: map[i]['titulo'],
        descripcion: map[i]['descripcion'],
        fechaVencimiento: map[i]['fechaVencimiento'],
        estado: map[i]['estado'],
      );
    });
  }

  Future<void> updateTarea(Tarea tarea) async {
    final db = await database;
    db.update(
      'task',
      tarea.toMap(),
      conflictAlgorithm: ConflictAlgorithm.replace,
      where: 'id = ?',
      whereArgs: [tarea.id],
    );
  }

  Future<void> deleteTarea(int idtarea) async {
    final db = await database;
    db.delete('task', where: 'id = ?', whereArgs: [idtarea]);
  }
}

'______________ ToMap_________________________________________


  Map<String, dynamic> toMap() {
    return ({
      'id': id,
      'titulo': titulo,
      'descripcion': descripcion,
      'fechaVencimiento': fechaVencimiento,
      'estado': estado,
    });
  }

'____________________Test Unitarios__________________________

import 'package:flutter_test/flutter_test.dart';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';

void main() {
  sqfliteFfiInit();

  databaseFactory = databaseFactoryFfi;
  late DatabaseHelper databaseHelper;

  setUp(() {
   
   //async
   //final path = join(await getDatabasesPath(), "<NOMBREEE>.db");
   //await databaseFactory.deleteDatabase(path);
    
    databaseHelper = DatabaseHelper();


  });
//}
  test('insert', () async {
    final tarea = Tarea(
      id: 1,
      titulo: "titulo",
      descripcion: "descripcion",
      fechaVencimiento: "fechaVencimiento",
      estado: "estado",
    );

    await databaseHelper.insertTarea(tarea);

    var alltareas = await databaseHelper.getTareas();

    for (var tareas in alltareas) {
      print(" Titulo: ${tareas.titulo}");
    }
  });

  test('update', () async {
    final tarea = Tarea(
      id: 1,
      titulo: "tituloUpdate",
      descripcion: "descripcionUpdate",
      fechaVencimiento: "fechaVencimientoUpdate",
      estado: "estadoUpdate",
    );

    await databaseHelper.updateTarea(tarea);

    var alltareas = await databaseHelper.getTareas();

    for (var tareas in alltareas) {
      print(" Titulo: ${tareas.titulo}");
    }
  });

  test('delete', () async {
    await databaseHelper.deleteTarea(1);

    var alltareas = await databaseHelper.getTareas();

    for (var tareas in alltareas) {
      print(" Titulo: ${tareas.titulo}");
    }
  });
}
