__CRUD

__ADD_________________________________________________________________________

import 'package:flutter/material.dart';
import 'package:veterinaria/models/pet.dart';
import 'package:veterinaria/services/database_helper.dart';

class AddPetPage extends StatefulWidget {
  const AddPetPage({super.key});

  @override
  State<StatefulWidget> createState() => AddPetPageState();
}

class AddPetPageState extends State {
  final nameController = TextEditingController();
  final ageController = TextEditingController();
  final weightController = TextEditingController();
  final notesController = TextEditingController();
  String species = "Perro";
  final _keyform = GlobalKey<FormState>();

  void insertpet() async {
    if (_keyform.currentState!.validate()) {
      final pet = Pet(
        id: DateTime.now().millisecond,
        name: nameController.text,
        species: species,
        age: int.parse(ageController.text),
        weight: double.parse(weightController.text),
        notes: notesController.text,
      );

      await DatabaseHelper().insertpet(pet);

      Navigator.pop(context, true);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            "Por favor corrija los valores del formulario antes de continuar",
          ),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Registro de Mascotas")),
      body: Padding(
        padding: EdgeInsetsGeometry.all(20),
        child: Form(
          key: _keyform,
          child: Column(
            children: [
              TextFormField(
                controller: nameController,
                decoration: InputDecoration(
                  labelText: "Nombre de Mascota",
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "Debe especificar el nombre de la mascota";
                  } else {
                    return null;
                  }
                },
              ),
              SizedBox(height: 20),
              DropdownButton(
                value: species,
                items: ["Perro", "Gato"]
                    .map((s) => DropdownMenuItem(value: s, child: Text(s)))
                    .toList(),
                onChanged: (value) {
                  setState(() {
                    species = value!;
                  });
                },
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: ageController,
                decoration: InputDecoration(
                  labelText: "Edad",
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "Debe especificar la edad";
                  } else {
                    final result = int.tryParse(value);
                    if (result == null) {
                      return "El valor ingresado debe ser entero";
                    } else {
                      return null;
                    }
                  }
                },
                keyboardType: TextInputType.number,
              ),
              SizedBox(height: 20),

              TextFormField(
                controller: weightController,
                decoration: InputDecoration(
                  labelText: "Peso",
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "Debe especificar el peso la mascota";
                  } else {
                    final result = double.tryParse(value);
                    if (result == null) {
                      return "Ingrese un valor valido  (0.00) ";
                    } else {
                      return null;
                    }
                  }
                },
                keyboardType: TextInputType.number,
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: notesController,
                decoration: InputDecoration(
                  labelText: "Observaciones",
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                maxLength: null,
              ),

              SizedBox(height: 30),

              ElevatedButton(
                onPressed: () {
                  insertpet();
                },
                child: Text("Guardar"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


__EDIT_________________________________________________________________________
import 'package:flutter/material.dart';
import 'package:veterinaria/models/pet.dart';
import 'package:veterinaria/services/database_helper.dart';

class EditPetPage extends StatefulWidget {
  final Pet pet;
  const EditPetPage({super.key, required this.pet});

  @override
  State<StatefulWidget> createState() => EditPetPageState();
}

class EditPetPageState extends State<EditPetPage> {
  late final TextEditingController nameController;
  late final TextEditingController ageController;
  late final TextEditingController weightController;
  late final TextEditingController notesController;
  String species = "Perro";
  final _keyform = GlobalKey<FormState>();

  void updatepet() async {
    if (_keyform.currentState!.validate()) {
      final pet = Pet(
        id: widget.pet.id,
        name: nameController.text,
        species: species,
        age: int.parse(ageController.text),
        weight: double.parse(weightController.text),
        notes: notesController.text,
      );

      await DatabaseHelper().updatepet(pet);

      Navigator.pop(context, true);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            "Por favor corrija los valores del formulario antes de continuar",
          ),
        ),
      );
    }
  }

  @override
  void initState() {
    super.initState();
    nameController = TextEditingController(text: widget.pet.name);
    ageController = TextEditingController(text: widget.pet.age.toString());
    weightController = TextEditingController(
      text: widget.pet.weight.toString(),
    );
    notesController = TextEditingController(text: widget.pet.notes);
    species = widget.pet.species;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Registro de Mascotas")),
      body: Padding(
        padding: EdgeInsetsGeometry.all(20),
        child: Form(
          key: _keyform,
          child: Column(
            children: [
              TextFormField(
                controller: nameController,
                decoration: InputDecoration(
                  labelText: "Nombre de Mascota",
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "Debe especificar el nombre de la mascota";
                  } else {
                    return null;
                  }
                },
              ),
              SizedBox(height: 20),
              DropdownButton(
                value: species,
                items: ["Perro", "Gato"]
                    .map((s) => DropdownMenuItem(value: s, child: Text(s)))
                    .toList(),
                onChanged: (value) {
                  setState(() {
                    species = value!;
                  });
                },
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: ageController,
                decoration: InputDecoration(
                  labelText: "Edad",
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "Debe especificar la edad";
                  } else {
                    final result = int.tryParse(value);
                    if (result == null) {
                      return "El valor ingresado debe ser entero";
                    } else {
                      return null;
                    }
                  }
                },
                keyboardType: TextInputType.number,
              ),
              SizedBox(height: 20),

              TextFormField(
                controller: weightController,
                decoration: InputDecoration(
                  labelText: "Peso",
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "Debe especificar el peso la mascota";
                  } else {
                    final result = double.tryParse(value);
                    if (result == null) {
                      return "Ingrese un valor valido  (0.00) ";
                    } else {
                      return null;
                    }
                  }
                },
                keyboardType: TextInputType.number,
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: notesController,
                decoration: InputDecoration(
                  labelText: "Observaciones",
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                maxLength: null,
              ),
              SizedBox(height: 20),

              TextFormField(
                controller: notesController,
                decoration: InputDecoration(
                  labelText: "Observaciones",
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                maxLength: null,
              ),

              SizedBox(height: 30),

              ElevatedButton(
                onPressed: () {
                  updatepet();
                },
                child: Text("Actualizar"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

______________________ TILE _____________________________________________
import 'package:flutter/material.dart';
import 'package:veterinaria/models/pet.dart';

class TilePet extends StatelessWidget {
  final Pet pet;
  final VoidCallback onEdit;
  final VoidCallback onDelet;
  const TilePet({
    super.key,
    required this.pet,
    required this.onEdit,
    required this.onDelet,
  });

  @override
  Widget build(BuildContext context) {
    Color colorpet;

    switch (pet.species.toLowerCase()) {
      case "perro":
        colorpet = Colors.cyan;
      case "gato":
        colorpet = Colors.orange;
      default:
        colorpet = Colors.grey;
    }

    return Card(
      margin: EdgeInsets.all(20),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: colorpet,
          child: Icon(Icons.pets),
        ),
        title: Text(pet.name),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(pet.species),
            SizedBox(height: 5),
            Text("Edad: ${pet.age}"),
            SizedBox(height: 5),
            Text("Peso${pet.weight}"),
            SizedBox(height: 10),
            Divider(height: 1),
            Text("Observaciones: ${pet.notes}"),
          ],
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              onPressed: onEdit,
              icon: Icon(Icons.edit_note, color: Colors.lightBlue),
            ),
            IconButton(
              onPressed: onDelet,
              icon: Icon(Icons.delete_outline, color: Colors.pinkAccent),
            ),
          ],
        ),
      ),
    );
  }
}

'______________________ HOME PAGE_______________________________________________
import 'package:flutter/material.dart';
import 'package:veterinaria/models/pet.dart';
import 'package:veterinaria/models/routes.dart';
import 'package:veterinaria/services/database_Helper.dart';
import 'package:veterinaria/views/edit_pet_page.dart';
import 'package:veterinaria/views/tile_pet.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<StatefulWidget> createState() => HomePageState();
}

class HomePageState extends State {
  late Future<List<Pet>> _listpets;

  @override
  void initState() {
    super.initState();
    _refreshList();
  }

  void _refreshList() {
    setState(() {
      _listpets = DatabaseHelper().getpets();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Mascotas")),
      body: FutureBuilder(
        future: _listpets,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Error: ${snapshot.error}"));
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(child: Text("No existen mascotas que mostrar"));
          } else {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, i) {
                final pet = snapshot.data![i];
                return TilePet(
                  pet: pet,
                  onEdit: () async {
                    final result = await Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => EditPetPage(pet: pet),
                      ),
                    );
                    if (result == true) {
                      _refreshList();
                    }
                  },
                  onDelet: () async {
                    final result = await showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text("Confirmación"),
                        content: Text(
                          "¿Esta seguro de eliminar a la mascota: ${pet.name}?",
                        ),
                        actions: [
                          TextButton(
                            onPressed: () {
                              Navigator.pop(context, false);
                            },
                            child: Text("Cancelar"),
                          ),

                          TextButton(
                            onPressed: () {
                              Navigator.pop(context, true);
                            },
                            child: Text("Eliminar"),
                          ),
                        ],
                      ),
                    );

                    if (result == true) {
                      await DatabaseHelper().deletepet(pet.id);
                      _refreshList();
                    }
                  },
                );
              },
            );
          }
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          final result = await Navigator.pushNamed(context, Routes.addPet);
          if (result == true) {
            _refreshList();
          }
        },
        child: Icon(Icons.add),
      ),
    );
  }
}

'____________________ MAIN ____________________
import 'package:flutter/material.dart';
import 'package:veterinaria/models/routes.dart';
import 'package:veterinaria/views/add_pet_page.dart';
import 'package:veterinaria/views/home_page.dart';

void main() {
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: HomePage(),
      routes: {Routes.addPet: (context) => AddPetPage()},
    );
  }
}
_____________ ROUTE _______________________________
class Routes {
  Routes._();
  static const String addPet = "/AddPet";
}

___________ OBJECT
class Pet {
  final int id;
  final String name;
  final String species;
  final int age;
  final double weight;
  final String notes;

  Pet({
    required this.id,
    required this.name,
    required this.species,
    required this.age,
    required this.weight,
    required this.notes,
  });

  Map<String, dynamic> toMap() {
    return ({
      "id": id,
      "name": name,
      "species": species,
      "age": age,
      "weight": weight,
      "notes": notes,
    });
  }
}

